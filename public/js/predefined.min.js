const APPID = "81544da8c886fef418a2f7fe5853ef78";

const Toast = Swal.mixin({
  toast: true,
  position: "top-end",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.onmouseenter = Swal.stopTimer;
    toast.onmouseleave = Swal.resumeTimer;
  }
});

function convertTimestamp(timestamp) {
	const date = new Date(timestamp);
	const options = {
	    hour: '2-digit',
	    minute: '2-digit',
	    second: '2-digit',
	    hour12: true
	};
	return new Intl.DateTimeFormat('en-US', options).format(date);
}

function convertDate(timestamp, withTimestamp = true) {
	const date = new Date(timestamp);
	let options = null;

	if (withTimestamp) {
		options = {
		    year: 'numeric',
		    month: 'long',
		    day: 'numeric',
		    hour: '2-digit',
		    minute: '2-digit',
		    second: '2-digit',
		    hour12: true
		};
	} else {
		options = {
		    year: 'numeric',
		    month: 'long',
		    day: 'numeric',
		};
	}

	return new Intl.DateTimeFormat('en-US', options).format(date);
}

function storeWeatherData(lat, lon) {
	$.ajax({
		url: '/weather',
		type: 'POST',
		dataType: 'JSON',
		data: {
			lat: lat,
			lon: lon,
		},
		headers: {
			'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
		},
		success: (response) => {
			console.log(response);
		},
		error: (data, text, ex) => {
			console.error(data.responseText);
		}
	})
}

function getWeatherData(lat, lon, exclude = null) {
	$.ajax({
		url: `https://api.openweathermap.org/data/3.0/onecall`,
		type: 'GET',
		dataType: 'JSON',
		data: {
			lat: lat,
			lon: lon,
			exclude: exclude,
			appid: '81544da8c886fef418a2f7fe5853ef78',
		},
		beforeSend: () => {
	        $('#btnFetchWeather').html('Fetching<div class="spinner-border spinner-border-sm ms-3" role="status"><span class="visually-hidden">Loading...</span></div>');
	        $('#btnFetchWeather').attr('disabled', true);
		},
		success: (response) => {
			// console.log(response);
			const currentWeather = response.current;

            $('#navCurrent').empty();

            // Date:${new Date(currentWeather.dt * 1000).toLocaleDateString()}<br>
            const currentForecast = `<div class="card animated flex-basis-3"><div class="card-header text-white bg-dark">${convertDate(currentWeather.dt * 1000)}</div><div class="card-body">
            Weather: ${currentWeather.weather[0].main}<br>
            Temperature: ${currentWeather.temp}°C<br>
            Humidity: ${currentWeather.humidity}%rH<br>
            Pressure: ${currentWeather.pressure} H/g<br>
            <hr class="my-2">
            Sunrise: ${convertTimestamp(currentWeather.sunrise * 1000)}<br>
            Sunset: ${convertTimestamp(currentWeather.sunset * 1000)}
            </div><div class="card-footer text-white bg-secondary"><img src="https://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@2x.png" alt="${currentWeather.weather[0].description}" class="card-img-footer d-inline-block me-2">${currentWeather.weather[0].main}, ${currentWeather.weather[0].description}.</div></div>`;
            $('#navCurrent').html(currentForecast);

            $('#navDaily').empty();

            // Date:${new Date(item.dt * 1000).toLocaleDateString()}<br>
            $.each(response.daily, function(index, item) {
            	const dailyForecast = $(`<div class="card animated flex-basis-3"><div class="card-header text-white bg-dark">${convertDate(item.dt * 1000, false)}</div><div class="card-body">
            Weather: ${item.weather[0].main}<br>
            Temperature: <br><ul class="ps-2 mb-0"><li>Morning: ${item.temp.day}°C</li><li>Noon: ${item.temp.day}°C</li><li>Evening: ${item.temp.eve}°C</li><li>Night: ${item.temp.night}°C</li></ul>
            Humidity: ${item.humidity}%rH<br>
            Pressure: ${item.pressure} H/g<br>
            <hr class="my-2">
            Sunrise: ${convertTimestamp(item.sunrise * 1000)}<br>
            Sunset: ${convertTimestamp(item.sunset * 1000)}
            </div><div class="card-footer text-white bg-secondary"><img src="https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png" alt="${item.weather[0].description}" class="card-img-footer d-inline-block me-2">${item.weather[0].main}, ${item.weather[0].description}.</div></div>`);
	            $('#navDaily').append(dailyForecast);
            });

            $('#navHourly').empty();

            // Date:${new Date(item.dt * 1000).toLocaleString()}<br>
            $.each(response.hourly, function(index, item) {
            	const dailyForecast = $(`<div class="card animated flex-basis-3"><div class="card-header text-white bg-dark">${convertDate(item.dt * 1000)}</div><div class="card-body">
            Weather: ${item.weather[0].main}<br>
            Temperature: ${item.temp}°C<br>
            Humidity: ${item.humidity}%rH<br>
            Pressure: ${item.pressure} H/g
            </div><div class="card-footer text-white bg-secondary"><img src="https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png" alt="${item.weather[0].description}" class="card-img-footer d-inline-block me-2">${item.weather[0].main}, ${item.weather[0].description}.</div></div>`);
	            $('#navHourly').append(dailyForecast);
            });
		},
		complete: () => {
            $('#btnFetchWeather').html('Fetch<i class="bi bi-cloud-download ms-3"></i>');
            $('#btnFetchWeather').attr('disabled', false);

	        Toast.fire({
	          icon: "success",
	          title: "The weather data has been fetched successfully."
	        });
		},
		error: (data, text, ex) => {
			console.error(ex);
		}
	});
}

function getLocationName(lat, lon, limit = 1) {
	$.ajax({
		url: `http://api.openweathermap.org/geo/1.0/reverse`,
		type: 'GET',
		dataType: 'JSON',
		data: {
			lat: lat,
			lon: lon,
			limit: limit,
			appid: '81544da8c886fef418a2f7fe5853ef78',
		},
		success: (response) => {
			$('#location').val(response[0].name);
		},
		error: (data, text, ex) => {
			console.error(ex);
		}
	});
}

function getVisitor() {
	const names = [
		'Austin', 'Caesar',
		'Emily', 'Lucia', 'Eva',
		'Linda', 'Felix',
		'Diego', 'Georgia'
	];

	Swal.fire({
		icon: 'question',
		iconColor: 'rgba(112, 102, 224, 1)',
		title: 'Your name',
		input: 'text',
		inputPlaceholder: names[Math.floor(Math.random() * names.length)],
		inputValidator: (value) => {
			return new Promise((resolve) => {
				if (value != '') { resolve(); }
				else { resolve('Do not leave me blank'); }
			});
		},
		confirmButtonText: 'Submit',
		allowOutsideClick: false,
		allowEscapeKey: false,
		backdrop: 'rgba(58, 52, 124, .96)',
	}).then((result) => {
		Swal.fire({
			title: 'Submitted',
			icon: 'success',
			iconColor: 'rgba(112, 102, 224, 1)',
			text: 'Thank you for visiting!',
			backdrop: 'rgba(58, 52, 124, .96)'
		})
	});
}

$(document).ready(function() {
	$('#loader').fadeOut();

	if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(function (position) {
            let lat = position.coords.latitude || 0;
            let lon = position.coords.longitude || 0;

            $('#lat').val(lat);
            $('#lon').val(lon);

			/* getWeatherData(lat, lon); */

	        }, function (error) {
	            console.error('Error:', error);
	        }, { enableHighAccuracy: true }
        );
    } else {
        Swal.fire('Warning', 'Location is currently unavailable.', 'warning');
        console.error('Geolocation is not supported.');
    }

    $('#btnFetchWeather').click(function(event) {
    	event.preventDefault();

    	let lat = $('#lat').val();
    	let lon = $('#lon').val();

		$('.form-control').removeClass('is-valid');
		$('.form-control').removeClass('is-invalid');

		let inputs = $('#weatherForm input');
		let allFilled = true;

		inputs.each(function() {
			if ($(this).val() === '') {
				allFilled = false;
				$(this).addClass('is-invalid');
			} else {
				$(this).addClass('is-valid');
			}
		});

		if (!allFilled) {
	        Toast.fire({
	          icon: "warning",
	          title: "Please fill all the required columns."
	        });
			return;
		} else {
			getLocationName(lat, lon);
			getWeatherData(lat, lon);
			storeWeatherData(lat, lon);
		}
    });
});